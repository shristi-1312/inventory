{"ast":null,"code":"import axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\nimport { USER_LOADED, AUTH_ERROR, REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_ERRORS } from './types'; // Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/login');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: AUTH_ERROR,\n      payload: error.response.data.msg\n    });\n  }\n}; // Register User\n\nexport const register = formData => {\n  return dispatch => {\n    return new Promise(async (resolve, reject) => {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n\n      try {\n        const res = await axios.post('/api/register', formData, config);\n        dispatch({\n          type: REGISTER_SUCCESS,\n          payload: res.data\n        });\n        resolve();\n      } catch (error) {\n        if (error.response.data.errors) {\n          dispatch({\n            type: REGISTER_FAIL,\n            payload: error.response.data.errors[0].msg\n          });\n        } else {\n          dispatch({\n            type: REGISTER_FAIL,\n            payload: error.response.data.msg\n          });\n        }\n      }\n    });\n  };\n}; // Login User\n\nexport const login = formData => {\n  return dispatch => {\n    return new Promise(async (resolve, reject) => {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n\n      try {\n        const res = await axios.post('/api/login', formData, config);\n        dispatch({\n          type: LOGIN_SUCCESS,\n          payload: res.data\n        });\n        resolve();\n      } catch (error) {\n        dispatch({\n          type: LOGIN_FAIL,\n          payload: error.response.data.msg\n        });\n      }\n    });\n  };\n}; // Logout User\n\nexport const logout = () => dispatch => dispatch({\n  type: LOGOUT\n}); // Clear Errors\n\nexport const clearErrors = () => dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"sources":["C:/Users/SHRISTI/Downloads/terracotta-v1-main/terracotta-v1-main/client/src/actions/authActions.js"],"names":["axios","setAuthToken","USER_LOADED","AUTH_ERROR","REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_ERRORS","loadUser","dispatch","localStorage","token","res","get","type","payload","data","error","response","msg","register","formData","Promise","resolve","reject","config","headers","post","errors","login","logout","clearErrors"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\nimport {\n  USER_LOADED,\n  AUTH_ERROR,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n  CLEAR_ERRORS,\n} from './types';\n\n// Load User\nexport const loadUser = () => async (dispatch) => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/login');\n\n    dispatch({ type: USER_LOADED, payload: res.data });\n  } catch (error) {\n    dispatch({ type: AUTH_ERROR, payload: error.response.data.msg });\n  }\n};\n\n// Register User\nexport const register = (formData) => {\n  return (dispatch) => {\n    return new Promise(async (resolve, reject) => {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      };\n\n      try {\n        const res = await axios.post('/api/register', formData, config);\n\n        dispatch({ type: REGISTER_SUCCESS, payload: res.data });\n\n        resolve();\n      } catch (error) {\n        if (error.response.data.errors) {\n          dispatch({\n            type: REGISTER_FAIL,\n            payload: error.response.data.errors[0].msg,\n          });\n        } else {\n          dispatch({ type: REGISTER_FAIL, payload: error.response.data.msg });\n        }\n      }\n    });\n  };\n};\n\n// Login User\nexport const login = (formData) => {\n  return (dispatch) => {\n    return new Promise(async (resolve, reject) => {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      };\n\n      try {\n        const res = await axios.post('/api/login', formData, config);\n\n        dispatch({ type: LOGIN_SUCCESS, payload: res.data });\n\n        resolve();\n      } catch (error) {\n        dispatch({ type: LOGIN_FAIL, payload: error.response.data.msg });\n      }\n    });\n  };\n};\n\n// Logout User\nexport const logout = () => (dispatch) => dispatch({ type: LOGOUT });\n\n// Clear Errors\nexport const clearErrors = () => (dispatch) => {\n  dispatch({ type: CLEAR_ERRORS });\n};\n"]},"metadata":{},"sourceType":"module"}