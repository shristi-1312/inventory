{"ast":null,"code":"import { GET_BOTTLES, ADD_BOTTLE, UPDATE_BOTTLE, DELETE_BOTTLE, BOTTLE_ERROR, CLEAR_FORM, CLEAR_BOTTLES, FILTER_BOTTLES, CLEAR_FILTER, OPEN_BOTTLE_FORM, CLOSE_BOTTLE_FORM, CHANGE_FORM_PROP, LOAD_CELLAR_STATS } from './types';\nimport axios from 'axios'; // Get user's bottles\n\nexport const getBottles = () => {\n  return dispatch => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const res = await axios.get('/api/bottles');\n        dispatch({\n          type: GET_BOTTLES,\n          payload: res.data\n        });\n        resolve();\n      } catch (error) {\n        dispatch({\n          type: BOTTLE_ERROR,\n          payload: error.response\n        });\n      }\n    });\n  };\n}; // Add bottle\n\nexport const addBottle = bottle => {\n  return dispatch => {\n    return new Promise(async (resolve, reject) => {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n\n      try {\n        const res = await axios.post('/api/bottles', bottle, config);\n        dispatch({\n          type: ADD_BOTTLE,\n          payload: res.data\n        });\n        resolve();\n      } catch (error) {\n        dispatch({\n          type: BOTTLE_ERROR,\n          payload: error.response\n        });\n      }\n    });\n  };\n}; // Update bottle\n\nexport const updateBottle = bottle => {\n  return dispatch => {\n    return new Promise(async (resolve, reject) => {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n\n      try {\n        const res = await axios.put(`/api/bottles/${bottle._id}`, bottle, config);\n        dispatch({\n          type: UPDATE_BOTTLE,\n          payload: res.data\n        });\n        resolve();\n      } catch (error) {\n        dispatch({\n          type: BOTTLE_ERROR,\n          payload: error.response.msg\n        });\n      }\n    });\n  };\n}; // Delete bottle\n\nexport const deleteBottle = id => {\n  return dispatch => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        await axios.delete(`/api/bottles/${id}`);\n        dispatch({\n          type: DELETE_BOTTLE,\n          payload: id\n        });\n        resolve();\n      } catch (error) {\n        dispatch({\n          type: BOTTLE_ERROR,\n          payload: error.response\n        });\n      }\n    });\n  };\n}; // Clear bottles\n\nexport const clearBottles = () => dispatch => {\n  dispatch({\n    type: CLEAR_BOTTLES\n  });\n}; // Filter bottles\n\nexport const filterBottles = text => dispatch => {\n  dispatch({\n    type: FILTER_BOTTLES,\n    payload: text\n  });\n}; // Clear filter\n\nexport const clearFilter = () => dispatch => {\n  dispatch({\n    type: CLEAR_FILTER\n  });\n}; // Set bottle form dialog to open\n\nexport const openBottleForm = () => dispatch => {\n  dispatch({\n    type: OPEN_BOTTLE_FORM\n  });\n}; // Set bottle form dialog to close\n\nexport const closeBottleForm = () => dispatch => {\n  dispatch({\n    type: CLOSE_BOTTLE_FORM\n  });\n}; // Change bottle form property\n\nexport const changeFormProp = (key, value) => dispatch => {\n  dispatch({\n    type: CHANGE_FORM_PROP,\n    payload: {\n      key,\n      value\n    }\n  });\n}; // Clear form\n\nexport const clearForm = () => dispatch => {\n  dispatch({\n    type: CLEAR_FORM\n  });\n}; // Load cellar stats based on get bottles request response\n\nexport const loadCellarStats = () => (dispatch, getState) => {\n  const bottles = getState().bottleState.bottles;\n  let _wineInCellar = 0;\n  let _winePending = 0; // let _wineConsumed = 0;\n\n  let _winePurchased = 0; // let _readyToDrink = 0;\n\n  let _totalValue = 0;\n\n  if (bottles) {\n    bottles.forEach(bottle => {\n      if (bottle.quantity) {\n        _winePurchased += bottle.quantity;\n      }\n\n      if (bottle.dateReceived === null) {\n        _winePending += bottle.quantity;\n      }\n\n      if (bottle.totalCost) {\n        _totalValue += bottle.totalCost;\n      }\n    });\n    _wineInCellar = _winePurchased - _winePending;\n    dispatch({\n      type: LOAD_CELLAR_STATS,\n      payload: {\n        _wineInCellar,\n        _winePending,\n        _winePurchased,\n        _totalValue\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/SHRISTI/Downloads/terracotta-v1-main/terracotta-v1-main/client/src/actions/bottleActions.js"],"names":["GET_BOTTLES","ADD_BOTTLE","UPDATE_BOTTLE","DELETE_BOTTLE","BOTTLE_ERROR","CLEAR_FORM","CLEAR_BOTTLES","FILTER_BOTTLES","CLEAR_FILTER","OPEN_BOTTLE_FORM","CLOSE_BOTTLE_FORM","CHANGE_FORM_PROP","LOAD_CELLAR_STATS","axios","getBottles","dispatch","Promise","resolve","reject","res","get","type","payload","data","error","response","addBottle","bottle","config","headers","post","updateBottle","put","_id","msg","deleteBottle","id","delete","clearBottles","filterBottles","text","clearFilter","openBottleForm","closeBottleForm","changeFormProp","key","value","clearForm","loadCellarStats","getState","bottles","bottleState","_wineInCellar","_winePending","_winePurchased","_totalValue","forEach","quantity","dateReceived","totalCost"],"mappings":"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","sourcesContent":["import {\n  GET_BOTTLES,\n  ADD_BOTTLE,\n  UPDATE_BOTTLE,\n  DELETE_BOTTLE,\n  BOTTLE_ERROR,\n  CLEAR_FORM,\n  CLEAR_BOTTLES,\n  FILTER_BOTTLES,\n  CLEAR_FILTER,\n  OPEN_BOTTLE_FORM,\n  CLOSE_BOTTLE_FORM,\n  CHANGE_FORM_PROP,\n  LOAD_CELLAR_STATS,\n} from './types';\nimport axios from 'axios';\n\n// Get user's bottles\nexport const getBottles = () => {\n  return (dispatch) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const res = await axios.get('/api/bottles');\n        dispatch({ type: GET_BOTTLES, payload: res.data });\n        resolve();\n      } catch (error) {\n        dispatch({ type: BOTTLE_ERROR, payload: error.response });\n      }\n    });\n  };\n};\n\n// Add bottle\nexport const addBottle = (bottle) => {\n  return (dispatch) => {\n    return new Promise(async (resolve, reject) => {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      };\n\n      try {\n        const res = await axios.post('/api/bottles', bottle, config);\n        dispatch({ type: ADD_BOTTLE, payload: res.data });\n        resolve();\n      } catch (error) {\n        dispatch({ type: BOTTLE_ERROR, payload: error.response });\n      }\n    });\n  };\n};\n\n// Update bottle\nexport const updateBottle = (bottle) => {\n  return (dispatch) => {\n    return new Promise(async (resolve, reject) => {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      };\n      try {\n        const res = await axios.put(\n          `/api/bottles/${bottle._id}`,\n          bottle,\n          config\n        );\n\n        dispatch({ type: UPDATE_BOTTLE, payload: res.data });\n        resolve();\n      } catch (error) {\n        dispatch({ type: BOTTLE_ERROR, payload: error.response.msg });\n      }\n    });\n  };\n};\n\n// Delete bottle\nexport const deleteBottle = (id) => {\n  return (dispatch) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        await axios.delete(`/api/bottles/${id}`);\n\n        dispatch({ type: DELETE_BOTTLE, payload: id });\n        resolve();\n      } catch (error) {\n        dispatch({ type: BOTTLE_ERROR, payload: error.response });\n      }\n    });\n  };\n};\n\n// Clear bottles\nexport const clearBottles = () => (dispatch) => {\n  dispatch({ type: CLEAR_BOTTLES });\n};\n\n// Filter bottles\nexport const filterBottles = (text) => (dispatch) => {\n  dispatch({ type: FILTER_BOTTLES, payload: text });\n};\n\n// Clear filter\nexport const clearFilter = () => (dispatch) => {\n  dispatch({ type: CLEAR_FILTER });\n};\n\n// Set bottle form dialog to open\nexport const openBottleForm = () => (dispatch) => {\n  dispatch({ type: OPEN_BOTTLE_FORM });\n};\n\n// Set bottle form dialog to close\nexport const closeBottleForm = () => (dispatch) => {\n  dispatch({ type: CLOSE_BOTTLE_FORM });\n};\n\n// Change bottle form property\nexport const changeFormProp = (key, value) => (dispatch) => {\n  dispatch({ type: CHANGE_FORM_PROP, payload: { key, value } });\n};\n\n// Clear form\nexport const clearForm = () => (dispatch) => {\n  dispatch({ type: CLEAR_FORM });\n};\n\n// Load cellar stats based on get bottles request response\nexport const loadCellarStats = () => (dispatch, getState) => {\n  const bottles = getState().bottleState.bottles;\n\n  let _wineInCellar = 0;\n  let _winePending = 0;\n  // let _wineConsumed = 0;\n  let _winePurchased = 0;\n  // let _readyToDrink = 0;\n  let _totalValue = 0;\n\n  if (bottles) {\n    bottles.forEach((bottle) => {\n      if (bottle.quantity) {\n        _winePurchased += bottle.quantity;\n      }\n      if (bottle.dateReceived === null) {\n        _winePending += bottle.quantity;\n      }\n      if (bottle.totalCost) {\n        _totalValue += bottle.totalCost;\n      }\n    });\n    _wineInCellar = _winePurchased - _winePending;\n    dispatch({\n      type: LOAD_CELLAR_STATS,\n      payload: { _wineInCellar, _winePending, _winePurchased, _totalValue },\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}