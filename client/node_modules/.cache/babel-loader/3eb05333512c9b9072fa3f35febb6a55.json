{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SHRISTI\\\\Downloads\\\\terracotta-v1-main\\\\terracotta-v1-main\\\\client\\\\src\\\\components\\\\bottles\\\\form\\\\AddBottleBySearch.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport { openBottleForm, changeFormProp } from '../../../actions/bottleActions';\nimport AutoCompleteTrie from './AutoCompleteTrie';\nimport { ProductTrie } from '../../../dataStructures/ProductTrie';\nimport uniqueProductNames from '../../../data/uniqueProductNames.json';\nimport uniqueBottles from '../../../data/uniqueBottles.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledAddBottleBySearch = styled.div`\n  .form {\n    display: grid;\n    grid-template-columns: 2fr 1fr;\n    align-items: center;\n    gap: 1rem;\n  }\n\n  .form input {\n    grid-column: 2;\n  }\n`;\n_c = StyledAddBottleBySearch;\n\nconst AddBottleBySearch = ({\n  openBottleForm,\n  changeFormProp\n}) => {\n  _s();\n\n  // Build up productTrie based on keys, values in uniqueDict\n  // uniqueDict keys correspond to unique product words\n  // uniqueDict values correspond to uniqueProductNames.json indices\n  //\n  // e.g. If \"Yellow Tail Shiraz\" product name has index of 100 in uniqueProductNames.json\n  // trie node sequences of \"y\", \"ye\", \"yel\"... \"yellow\" for EACH WORD SEPERATELY\n  // each node \"y\", \"e\", \"l\" ... would have an indices array property which includes 100\n  // so in \"y-e-l-l-o-w\" node sequence, the ProductNode \"w\" would have 100 in its indices property\n  // and this component accesses uniqueProductNames[100] to list as an option for the user\n  const [productTrie, setProductTrie] = useState();\n  useEffect(() => {\n    const trie = new ProductTrie();\n\n    for (const name of uniqueProductNames) {\n      trie.addSequence(name);\n    }\n\n    setProductTrie(trie);\n  }, []);\n\n  const searchTrie = searchStr => {\n    return productTrie.getOptions(searchStr);\n  };\n\n  const onContinue = e => {\n    e.preventDefault();\n    const userInput = e.target.product.value;\n\n    if (userInput === '') {\n      return;\n    }\n\n    for (const bottle of uniqueBottles) {\n      if (bottle.product === userInput) {\n        for (const key in bottle) {\n          if (key === 'country') {\n            changeFormProp(key, bottle[key].code);\n          } else {\n            changeFormProp(key, bottle[key]);\n          }\n        }\n\n        if (bottle['price']) {\n          changeFormProp('totalCost', parseFloat(bottle['price']));\n        } else {\n          changeFormProp('price', 0);\n        }\n\n        openBottleForm();\n        return;\n      }\n    }\n\n    changeFormProp('product', userInput);\n    openBottleForm();\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledAddBottleBySearch, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: onContinue,\n      children: [/*#__PURE__*/_jsxDEV(AutoCompleteTrie, {\n        placeholderText: \"Search for wine to add\",\n        required: true,\n        name: \"product\",\n        searchTrie: searchTrie\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Continue\",\n        className: \"btn btn-primary search-btn\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddBottleBySearch, \"+ltWGfSW4v6oDcZrAtDA81LKL7A=\");\n\n_c2 = AddBottleBySearch;\nexport default connect(null, {\n  openBottleForm,\n  changeFormProp\n})(AddBottleBySearch);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledAddBottleBySearch\");\n$RefreshReg$(_c2, \"AddBottleBySearch\");","map":{"version":3,"sources":["C:/Users/SHRISTI/Downloads/terracotta-v1-main/terracotta-v1-main/client/src/components/bottles/form/AddBottleBySearch.js"],"names":["useEffect","useState","styled","connect","openBottleForm","changeFormProp","AutoCompleteTrie","ProductTrie","uniqueProductNames","uniqueBottles","StyledAddBottleBySearch","div","AddBottleBySearch","productTrie","setProductTrie","trie","name","addSequence","searchTrie","searchStr","getOptions","onContinue","e","preventDefault","userInput","target","product","value","bottle","key","code","parseFloat"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport { openBottleForm, changeFormProp } from '../../../actions/bottleActions';\nimport AutoCompleteTrie from './AutoCompleteTrie';\n\nimport { ProductTrie } from '../../../dataStructures/ProductTrie';\nimport uniqueProductNames from '../../../data/uniqueProductNames.json';\nimport uniqueBottles from '../../../data/uniqueBottles.json';\n\nconst StyledAddBottleBySearch = styled.div`\n  .form {\n    display: grid;\n    grid-template-columns: 2fr 1fr;\n    align-items: center;\n    gap: 1rem;\n  }\n\n  .form input {\n    grid-column: 2;\n  }\n`;\n\nconst AddBottleBySearch = ({ openBottleForm, changeFormProp }) => {\n  // Build up productTrie based on keys, values in uniqueDict\n  // uniqueDict keys correspond to unique product words\n  // uniqueDict values correspond to uniqueProductNames.json indices\n  //\n  // e.g. If \"Yellow Tail Shiraz\" product name has index of 100 in uniqueProductNames.json\n  // trie node sequences of \"y\", \"ye\", \"yel\"... \"yellow\" for EACH WORD SEPERATELY\n  // each node \"y\", \"e\", \"l\" ... would have an indices array property which includes 100\n  // so in \"y-e-l-l-o-w\" node sequence, the ProductNode \"w\" would have 100 in its indices property\n  // and this component accesses uniqueProductNames[100] to list as an option for the user\n  const [productTrie, setProductTrie] = useState();\n\n  useEffect(() => {\n    const trie = new ProductTrie();\n    for (const name of uniqueProductNames) {\n      trie.addSequence(name);\n    }\n    setProductTrie(trie);\n  }, []);\n\n  const searchTrie = (searchStr) => {\n    return productTrie.getOptions(searchStr);\n  };\n\n  const onContinue = (e) => {\n    e.preventDefault();\n    const userInput = e.target.product.value;\n\n    if (userInput === '') {\n      return;\n    }\n    for (const bottle of uniqueBottles) {\n      if (bottle.product === userInput) {\n        for (const key in bottle) {\n          if (key === 'country') {\n            changeFormProp(key, bottle[key].code);\n          } else {\n            changeFormProp(key, bottle[key]);\n          }\n        }\n        if (bottle['price']) {\n          changeFormProp('totalCost', parseFloat(bottle['price']));\n        } else {\n          changeFormProp('price', 0);\n        }\n        openBottleForm();\n        return;\n      }\n    }\n    changeFormProp('product', userInput);\n    openBottleForm();\n  };\n  return (\n    <StyledAddBottleBySearch>\n      <form className='form' onSubmit={onContinue}>\n        <AutoCompleteTrie\n          placeholderText='Search for wine to add'\n          required={true}\n          name='product'\n          searchTrie={searchTrie}\n        />\n        <input\n          type='submit'\n          value='Continue'\n          className='btn btn-primary search-btn'\n        />\n      </form>\n    </StyledAddBottleBySearch>\n  );\n};\n\nexport default connect(null, { openBottleForm, changeFormProp })(\n  AddBottleBySearch\n);\n"]},"metadata":{},"sourceType":"module"}