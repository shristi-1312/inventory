{"ast":null,"code":"import { SET_ALERT, REMOVE_ALERT } from '../actions/types';\nconst initialState = {\n  loginAlerts: [],\n  registerAlerts: []\n};\n\nconst AlertReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_ALERT:\n      if (action.payload.type === 'login') {\n        return { ...state,\n          loginAlerts: [...state.loginAlerts, action.payload]\n        };\n      } else {\n        return { ...state,\n          registerAlerts: [...state.registerAlerts, action.payload]\n        };\n      }\n\n    case REMOVE_ALERT:\n      return { ...state,\n        loginAlerts: state.loginAlerts.filter(alert => alert.id !== action.payload),\n        registerAlerts: state.registerAlerts.filter(alert => alert.id !== action.payload)\n      };\n\n    default:\n      return state;\n  }\n};\n\n_c = AlertReducer;\nexport default AlertReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AlertReducer\");","map":{"version":3,"sources":["C:/Users/SHRISTI/Downloads/terracotta-v1-main/terracotta-v1-main/client/src/reducers/AlertReducer.js"],"names":["SET_ALERT","REMOVE_ALERT","initialState","loginAlerts","registerAlerts","AlertReducer","state","action","type","payload","filter","alert","id"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,YAApB,QAAwC,kBAAxC;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAE,EADM;AAEnBC,EAAAA,cAAc,EAAE;AAFG,CAArB;;AAKA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,SAAL;AACE,UAAIO,MAAM,CAACE,OAAP,CAAeD,IAAf,KAAwB,OAA5B,EAAqC;AACnC,eAAO,EACL,GAAGF,KADE;AAELH,UAAAA,WAAW,EAAE,CAAC,GAAGG,KAAK,CAACH,WAAV,EAAuBI,MAAM,CAACE,OAA9B;AAFR,SAAP;AAID,OALD,MAKO;AACL,eAAO,EACL,GAAGH,KADE;AAELF,UAAAA,cAAc,EAAE,CAAC,GAAGE,KAAK,CAACF,cAAV,EAA0BG,MAAM,CAACE,OAAjC;AAFX,SAAP;AAID;;AACH,SAAKR,YAAL;AACE,aAAO,EACL,GAAGK,KADE;AAELH,QAAAA,WAAW,EAAEG,KAAK,CAACH,WAAN,CAAkBO,MAAlB,CACVC,KAAD,IAAWA,KAAK,CAACC,EAAN,KAAaL,MAAM,CAACE,OADpB,CAFR;AAKLL,QAAAA,cAAc,EAAEE,KAAK,CAACF,cAAN,CAAqBM,MAArB,CACbC,KAAD,IAAWA,KAAK,CAACC,EAAN,KAAaL,MAAM,CAACE,OADjB;AALX,OAAP;;AASF;AACE,aAAOH,KAAP;AAxBJ;AA0BD,CA3BD;;KAAMD,Y;AA6BN,eAAeA,YAAf","sourcesContent":["import { SET_ALERT, REMOVE_ALERT } from '../actions/types';\n\nconst initialState = {\n  loginAlerts: [],\n  registerAlerts: [],\n};\n\nconst AlertReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_ALERT:\n      if (action.payload.type === 'login') {\n        return {\n          ...state,\n          loginAlerts: [...state.loginAlerts, action.payload],\n        };\n      } else {\n        return {\n          ...state,\n          registerAlerts: [...state.registerAlerts, action.payload],\n        };\n      }\n    case REMOVE_ALERT:\n      return {\n        ...state,\n        loginAlerts: state.loginAlerts.filter(\n          (alert) => alert.id !== action.payload\n        ),\n        registerAlerts: state.registerAlerts.filter(\n          (alert) => alert.id !== action.payload\n        ),\n      };\n    default:\n      return state;\n  }\n};\n\nexport default AlertReducer;\n"]},"metadata":{},"sourceType":"module"}