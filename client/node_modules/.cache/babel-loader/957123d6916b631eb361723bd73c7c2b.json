{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.ProductTrie = void 0;\n\nvar ProductNode_1 = require(\"./ProductNode\");\n\nvar ProductTrie = function () {\n  function ProductTrie() {\n    this.root = new ProductNode_1.ProductNode('');\n  } // Adds a word to the trie\n\n\n  ProductTrie.prototype.addSequence = function (sequence) {\n    this.addNodeRecursive(this.root, sequence);\n  }; // From root, add first letter of remaining sequence and indices recursively\n\n\n  ProductTrie.prototype.addNodeRecursive = function (root, letters) {\n    // If there are more letters in sequence\n    if (letters.length > 0) {\n      var firstLetter = letters.charAt(0); // If the root has children\n\n      if (root.getChildren().length > 0) {\n        var match = false;\n\n        for (var i = 0; i < root.getChildren().length; i++) {\n          if (root.getChildren()[i].getLetter() === firstLetter) {\n            match = true;\n            this.addNodeRecursive(root.getChildren()[i], letters.slice(1));\n            break;\n          }\n        }\n\n        if (match === false) {\n          root.addChild(firstLetter);\n          this.addNodeRecursive(root.getChildren()[root.getChildren().length - 1], letters.slice(1));\n        }\n      } else {\n        root.addChild(firstLetter);\n        this.addNodeRecursive(root.getChildren()[0], letters.slice(1));\n      }\n    } else {\n      return;\n    }\n  }; // Returns string array of all product options that begin with searchStr\n\n\n  ProductTrie.prototype.getOptions = function (searchStr) {\n    return this.traverse(this.root, searchStr.toLowerCase(), '');\n  }; // Traverse trie of searchStr node sequence, building up sequenceStr\n  // then return sequenceStr + all sub sequences as product options\n\n\n  ProductTrie.prototype.traverse = function (root, searchStrRemoving, sequenceStr) {\n    if (searchStrRemoving.length > 0) {\n      var firstLetter = searchStrRemoving.charAt(0);\n\n      if (root.getChildren().length > 0) {\n        for (var _i = 0, _a = root.getChildren(); _i < _a.length; _i++) {\n          var child = _a[_i];\n\n          if (child.getLetter().toLowerCase() === firstLetter) {\n            return this.traverse(child, searchStrRemoving.slice(1), sequenceStr + child.getLetter());\n          }\n        }\n\n        return [];\n      } else {\n        return [];\n      }\n    } else {\n      var result = this.getAllSequences(root, sequenceStr.slice(0, -1), []);\n      return result;\n    }\n  }; // Return sequences after searchStr's last node (i.e. last letter)\n\n\n  ProductTrie.prototype.getAllSequences = function (root, sequence, productArr) {\n    if (root.getChildren().length > 0) {\n      for (var _i = 0, _a = root.getChildren(); _i < _a.length; _i++) {\n        var child = _a[_i];\n        productArr.concat(this.getAllSequences(child, sequence + root.getLetter(), productArr));\n      }\n\n      return productArr;\n    } else {\n      productArr.push(sequence + root.getLetter());\n      return productArr;\n    }\n  };\n\n  return ProductTrie;\n}();\n\nexports.ProductTrie = ProductTrie;","map":{"version":3,"sources":["C:/Users/SHRISTI/Downloads/terracotta-v1-main/terracotta-v1-main/client/src/dataStructures/ProductTrie.js"],"names":["exports","__esModule","ProductTrie","ProductNode_1","require","root","ProductNode","prototype","addSequence","sequence","addNodeRecursive","letters","length","firstLetter","charAt","getChildren","match","i","getLetter","slice","addChild","getOptions","searchStr","traverse","toLowerCase","searchStrRemoving","sequenceStr","_i","_a","child","result","getAllSequences","productArr","concat","push"],"mappings":"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","sourcesContent":["\"use strict\";\nexports.__esModule = true;\nexports.ProductTrie = void 0;\nvar ProductNode_1 = require(\"./ProductNode\");\nvar ProductTrie = /** @class */ (function () {\n    function ProductTrie() {\n        this.root = new ProductNode_1.ProductNode('');\n    }\n    // Adds a word to the trie\n    ProductTrie.prototype.addSequence = function (sequence) {\n        this.addNodeRecursive(this.root, sequence);\n    };\n    // From root, add first letter of remaining sequence and indices recursively\n    ProductTrie.prototype.addNodeRecursive = function (root, letters) {\n        // If there are more letters in sequence\n        if (letters.length > 0) {\n            var firstLetter = letters.charAt(0);\n            // If the root has children\n            if (root.getChildren().length > 0) {\n                var match = false;\n                for (var i = 0; i < root.getChildren().length; i++) {\n                    if (root.getChildren()[i].getLetter() === firstLetter) {\n                        match = true;\n                        this.addNodeRecursive(root.getChildren()[i], letters.slice(1));\n                        break;\n                    }\n                }\n                if (match === false) {\n                    root.addChild(firstLetter);\n                    this.addNodeRecursive(root.getChildren()[root.getChildren().length - 1], letters.slice(1));\n                }\n            }\n            else {\n                root.addChild(firstLetter);\n                this.addNodeRecursive(root.getChildren()[0], letters.slice(1));\n            }\n        }\n        else {\n            return;\n        }\n    };\n    // Returns string array of all product options that begin with searchStr\n    ProductTrie.prototype.getOptions = function (searchStr) {\n        return this.traverse(this.root, searchStr.toLowerCase(), '');\n    };\n    // Traverse trie of searchStr node sequence, building up sequenceStr\n    // then return sequenceStr + all sub sequences as product options\n    ProductTrie.prototype.traverse = function (root, searchStrRemoving, sequenceStr) {\n        if (searchStrRemoving.length > 0) {\n            var firstLetter = searchStrRemoving.charAt(0);\n            if (root.getChildren().length > 0) {\n                for (var _i = 0, _a = root.getChildren(); _i < _a.length; _i++) {\n                    var child = _a[_i];\n                    if (child.getLetter().toLowerCase() === firstLetter) {\n                        return this.traverse(child, searchStrRemoving.slice(1), sequenceStr + child.getLetter());\n                    }\n                }\n                return [];\n            }\n            else {\n                return [];\n            }\n        }\n        else {\n            var result = this.getAllSequences(root, sequenceStr.slice(0, -1), []);\n            return result;\n        }\n    };\n    // Return sequences after searchStr's last node (i.e. last letter)\n    ProductTrie.prototype.getAllSequences = function (root, sequence, productArr) {\n        if (root.getChildren().length > 0) {\n            for (var _i = 0, _a = root.getChildren(); _i < _a.length; _i++) {\n                var child = _a[_i];\n                productArr.concat(this.getAllSequences(child, sequence + root.getLetter(), productArr));\n            }\n            return productArr;\n        }\n        else {\n            productArr.push(sequence + root.getLetter());\n            return productArr;\n        }\n    };\n    return ProductTrie;\n}());\nexports.ProductTrie = ProductTrie;\n"]},"metadata":{},"sourceType":"module"}